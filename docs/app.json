[{"name":"app.R","content":"\r\n\r\nlibrary(shiny)\r\nlibrary(tidyverse)\r\n\r\n#webr::install(\"googlesheets4\")\r\n#require(googlesheets4)\r\n#library(googlesheets4)\r\n#gs4_deauth()\r\n#sheet_id <- \"https://docs.google.com/spreadsheets/d/1Y8HZf93GiC_8XjK7nxqZONcTmi4Ck7EH96hR4q6Kbio\"\r\n# N1counts <- read_sheet(sheet_id)\r\n# N1counts$Date <- as.Date(as.character(N1counts$Date), \"%y%m%d\")\r\n\r\n\r\n# https://lokraj.me/post/download-github-data/\r\n#library(readr)\r\n# github_url <- \"https://raw.githubusercontent.com/Rand3rino/WBE-GVSU-Shinylive/main/WBE-Analysis/N%20Counts.csv\"\r\n#N1counts <- read_csv(url(github_url))\r\n#N1counts$Date <- as.Date(as.character(N1counts$Date), \"%y%m%d\")\r\n\r\n# https://stackoverflow.com/questions/14441729/read-a-csv-from-github-into-r\r\n#library(RCurl)\r\n#x <- getURL(github_url)\r\n#y <- read.csv(text = x)\r\n\r\n# https://rpubs.com/kylewbrown/github-csv-r\r\n# N1counts <- read.csv(github_url)\r\nN1counts <- read.csv(\"https://docs.google.com/spreadsheets/d/1Y8HZf93GiC_8XjK7nxqZONcTmi4Ck7EH96hR4q6Kbio/export?format=csv\")\r\nN1counts$Date <- as.Date(as.character(N1counts$Date), format = \"%y%m%d\")\r\n\r\nVariantProportions <- read.csv(\"https://docs.google.com/spreadsheets/d/19sCocxxppFfBrM0AKEojOzWoN6C6myoZjIA492deetc/export?format=csv\")\r\nVariantProportions$Date <- as.Date(VariantProportions$Date, format =\"%m/%d/%Y\")\r\nVariantProportions <- VariantProportions %>% \r\n  pivot_longer(!Date, names_to = \"Variant\", values_to = \"Proportion\", values_drop_na = TRUE)\r\n\r\n# # Define UI for application that draws a line chart\r\nui <- fluidPage(\r\n  \r\n  # Application title\r\n  titlePanel(\"WBE-Analysis\"),\r\n  \r\n  # Sidebar with a dropdown for number site\r\n  # sidebarLayout(\r\n    # sidebarPanel(\r\n      # selectInput(\"SiteSelect\",\r\n      #             \"Select Site to view\",\r\n      #             choices = c(\"CS\", \"GG\", \"GO\", \"GR\", \"WB\", \"WK\", \"WY\"))\r\n    # ),\r\n    \r\n    # Show a plot of the n1 counts\r\n    mainPanel(\r\n      plotOutput(\"N1Plot\"),\r\n      plotOutput(\"VariantPlot\")\r\n    )\r\n  # )\r\n)\r\n# \r\n# # Define server logic required to draw a line chart\r\nserver <- function(input, output) {\r\n  \r\n  output$N1Plot <- renderPlot({\r\n    N1Site <- N1counts #%>% filter(Site == input$SiteSelect)\r\n    ggplot(N1Site, aes(x=Date, y=log(`N1.GC.100mL`))) + geom_point() + geom_smooth() + theme_bw() #+ geom_line() \r\n  })\r\n  \r\n  output$VariantPlot <- renderPlot({\r\n    Variants <- VariantProportions #%>% filter(Site == input$SiteSelect)\r\n    ggplot(Variants, aes(x=Date, y=Proportion)) + geom_col(aes(fill=Variant)) + theme_bw() + theme(legend.position = \"bottom\")\r\n  })\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n\r\n","type":"text"},{"name":"WBEapp.R","content":"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## https://debruine.github.io/shinyintro/data.html\r\n# update.packages(ask = F) # https://stackoverflow.com/questions/68451929/shiny-apps-not-running-hanging-not-working\r\n# library(shiny)\r\n# library(shinylive)\r\n# library(tidyverse)\r\n# library(plotly)\r\n# library(googlesheets4)\r\n# gs4_deauth()\r\n# sheet_id <- \"https://docs.google.com/spreadsheets/d/1Y8HZf93GiC_8XjK7nxqZONcTmi4Ck7EH96hR4q6Kbio\"\r\n# N1counts <- read_sheet(sheet_id)\r\n# N1counts$Date <- as.Date(as.character(N1counts$Date), \"%y%m%d\")\r\n# \r\n# # Define UI for application that draws a line chart\r\nui <- fluidPage(\r\n\r\n    # Application title\r\n    titlePanel(\"WBE-Analysis\"),\r\n\r\n    # Sidebar with a dropdown for number site\r\n    sidebarLayout(\r\n        sidebarPanel(\r\n          selectInput(\"SiteSelect\",\r\n                        \"Select Site to view\",\r\n                        choices = c(\"CS\", \"GG\", \"GO\", \"GR\", \"WB\", \"WK\", \"WY\"))\r\n        ),\r\n\r\n        # Show a plot of the n1 counts\r\n        mainPanel(\r\n           plotOutput(\"N1Plot\")\r\n        )\r\n    )\r\n)\r\n# \r\n# # Define server logic required to draw a line chart\r\n server <- function(input, output) {\r\n \r\n     output$N1Plot <- renderPlot({\r\n         N1Site <- N1counts %>% filter(Site == input$SiteSelect)\r\n         ggplot(N1Site, aes(x=Date, y=`N1 GC/100mL`)) + geom_line() + geom_point() + theme_bw()\r\n     })\r\n }\r\n\r\n # Run the application \r\n shinyApp(ui = ui, server = server)\r\n","type":"text"}]
