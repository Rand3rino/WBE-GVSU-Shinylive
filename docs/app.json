[{"name":"app.R","content":"\r\n\r\nlibrary(shiny)\r\nlibrary(tidyverse)\r\nlibrary(plotly)\r\n\r\noptions(scipen = 999)\r\nN1counts <- read.csv(\"https://docs.google.com/spreadsheets/d/1Y8HZf93GiC_8XjK7nxqZONcTmi4Ck7EH96hR4q6Kbio/export?format=csv\")\r\nN1counts$Date <- as.Date(as.character(N1counts$Date), format = \"%y%m%d\")\r\n\r\n# https://matrixify-excelify.medium.com/download-specific-google-sheets-tab-as-csv-file-e805ecef29fc\r\n# VariantProportions <- read.csv(\"https://docs.google.com/spreadsheets/d/19sCocxxppFfBrM0AKEojOzWoN6C6myoZjIA492deetc/export?format=csv\")\r\nVariantProportions <- read.csv(\"https://docs.google.com/spreadsheets/d/19sCocxxppFfBrM0AKEojOzWoN6C6myoZjIA492deetc/gviz/tq?tqx=out:csv;outFileName:data&sheet=Sheet1\")\r\ncolnames(VariantProportions) <- paste(colnames(VariantProportions), match(colnames(VariantProportions), colnames(VariantProportions)), sep=\"_\")\r\nVariantProportions <- VariantProportions %>%\r\n  pivot_longer(!Date.by.Week_1, names_to = \"Variant\", values_to = \"Proportion\", values_drop_na = TRUE)\r\nVariantProportions$Week <- as.Date(VariantProportions$Date.by.Week_1, format =\"%m/%d/%Y\")\r\nVariantProportions <- separate_wider_delim(VariantProportions, Variant, delim = \"_\", names = c(\"Variant\", \"Appearance\"))\r\nVariantProportions$Appearance <- as.integer(VariantProportions$Appearance)\r\nVariantProportions <- VariantProportions[order(VariantProportions$Appearance),]\r\nVariantProportions$Variant <- factor(VariantProportions$Variant, levels=unique(VariantProportions$Variant))\r\n\r\nVariantColors <- read.csv(\"https://docs.google.com/spreadsheets/d/19sCocxxppFfBrM0AKEojOzWoN6C6myoZjIA492deetc/gviz/tq?tqx=out:csv;outFileName:data&sheet=Sheet2\")\r\nVariantColors$Variant <- factor(VariantColors$Variant, levels=unique(VariantColors$Variant))\r\nVariantColors$HexCode <- toupper(VariantColors$HexCode)\r\nVariantColors$Appearance <- 2:(nrow(VariantColors)+1)\r\nVariantProportions <- left_join( VariantProportions, VariantColors, by=\"Appearance\")\r\n\r\n\r\n# # Define UI for application that draws a line chart\r\nui <- fluidPage(\r\n  \r\n  # Application title\r\n  titlePanel(\"WBE-Analysis\"),\r\n  \r\n    \r\n    mainPanel(\r\n      # plotlyOutput(\"N1Plot\"),\r\n      plotOutput(\"N1Plot\"),\r\n      plotlyOutput(\"VariantPlot\")\r\n      \r\n      # plotOutput(\"VariantPlot\")\r\n    )\r\n)\r\n\r\n# # Define server logic required to draw a line chart\r\nserver <- function(input, output) {\r\n  \r\n  output$N1Plot <- renderPlotly({\r\n    ggplotly((ggplot(N1counts, aes(x=Date, y=N1.GC.100mL))\r\n       + geom_point()\r\n       + geom_smooth()\r\n       + theme_bw()\r\n       + scale_y_log10()\r\n       + ylab(\"Log (N1 Counts)\")\r\n       + ggtitle(\"N1 Counts over Time (Log Scale)\", )\r\n       + theme(plot.title = element_text(hjust = 0.5)))\r\n    )\r\n  })\r\n\r\n  output$VariantPlot <- renderPlotly({         \r\n    p<-ggplotly((ggplot(VariantProportions, aes(x=Week, y=Proportion, fill=Variant.y))\r\n      + geom_col(aes(fill=HexCode))\r\n      + scale_fill_identity(name = \"Variants\", labels=levels(VariantProportions$Variant.y), guide=\"legend\")\r\n      + theme_bw()\r\n      + scale_y_continuous(labels = scales::percent) # Y-Axis as percents\r\n      + xlab(\"Date\")\r\n      + ggtitle(\"Variants over Time as Proportions\")\r\n      + theme(plot.title = element_text(hjust = 0.5))\r\n    )) %>% layout(legend = list(orientation = \"h\", y =-.4))\r\n    \r\n    for (i in 1:nrow(VariantColors)) {\r\n      p$x$data[[i]]$name <- VariantColors$Variant[VariantColors$HexCode==p$x$data[[i]]$name]\r\n    }\r\n    \r\n    p\r\n  })\r\n  \r\n  output$N1Plot <- renderPlot({\r\n    (ggplot(N1counts, aes(x=Date, y=N1.GC.100mL)) + geom_point()\r\n      + geom_smooth()\r\n      + theme_bw()\r\n      + scale_y_log10()\r\n      + ylab(\"N1 Counts (Log Scale)\")\r\n      + ggtitle(\"N1 Counts over Time (Log Scale)\", )\r\n      + theme(plot.title = element_text(hjust = 0.5)))\r\n  })\r\n  # \r\n  # output$VariantPlot <- renderPlot({\r\n  #   ggplot(VariantProportions, aes(x=Date.by.Week, y=Proportion)) + geom_col(aes(fill=Variant)) + theme_bw() + theme(legend.position = \"bottom\")\r\n  # })\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\n#shinylive::export(\"WBE-Analysis\", \"docs\")\r\n#httpuv::runStaticServer(\"docs\")","type":"text"},{"name":"WBEapp.R","content":"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## https://debruine.github.io/shinyintro/data.html\r\n# update.packages(ask = F) # https://stackoverflow.com/questions/68451929/shiny-apps-not-running-hanging-not-working\r\n# library(shiny)\r\n# library(shinylive)\r\n# library(tidyverse)\r\n# library(plotly)\r\n# library(googlesheets4)\r\n# gs4_deauth()\r\n# sheet_id <- \"https://docs.google.com/spreadsheets/d/1Y8HZf93GiC_8XjK7nxqZONcTmi4Ck7EH96hR4q6Kbio\"\r\n# N1counts <- read_sheet(sheet_id)\r\n# N1counts$Date <- as.Date(as.character(N1counts$Date), \"%y%m%d\")\r\n# \r\n# # Define UI for application that draws a line chart\r\nui <- fluidPage(\r\n\r\n    # Application title\r\n    titlePanel(\"WBE-Analysis\"),\r\n\r\n    # Sidebar with a dropdown for number site\r\n    sidebarLayout(\r\n        sidebarPanel(\r\n          selectInput(\"SiteSelect\",\r\n                        \"Select Site to view\",\r\n                        choices = c(\"CS\", \"GG\", \"GO\", \"GR\", \"WB\", \"WK\", \"WY\"))\r\n        ),\r\n\r\n        # Show a plot of the n1 counts\r\n        mainPanel(\r\n           plotOutput(\"N1Plot\")\r\n        )\r\n    )\r\n)\r\n# \r\n# # Define server logic required to draw a line chart\r\n server <- function(input, output) {\r\n \r\n     output$N1Plot <- renderPlot({\r\n         N1Site <- N1counts %>% filter(Site == input$SiteSelect)\r\n         ggplot(N1Site, aes(x=Date, y=`N1 GC/100mL`)) + geom_line() + geom_point() + theme_bw()\r\n     })\r\n }\r\n\r\n # Run the application \r\n shinyApp(ui = ui, server = server)\r\n","type":"text"}]
